// Generated by CoffeeScript 1.10.0
var Renderer, fs, spawn, tmp;

fs = require('fs');

tmp = require('tmp');

spawn = require('child_process').spawn;

module.exports = Renderer = (function() {
  function Renderer(data, imagePath, opts) {
    this.data = data;
    this.imagePath = imagePath;
    this.opts = opts;
    this.dataPath = null;
    this.scriptPath = null;
    this.cb = null;
  }

  Renderer.prototype.render = function(cb) {
    this.cb = cb;
    return this.writeAll((function(_this) {
      return function(err) {
        if (err) {
          return _this.cleanUp(err);
        }
        return _this.runPhantom(function(err) {
          if (err) {
            return _this.cleanUp(err);
          }
          return _this.cleanUp();
        });
      };
    })(this));
  };

  Renderer.prototype.cleanUp = function(err) {
    if (this.dataPath) {
      fs.unlinkSync(this.dataPath);
    }
    if (this.scriptPath) {
      fs.unlinkSync(this.scriptPath);
    }
    return this.cb(err);
  };

  Renderer.prototype.writeAll = function(cb) {
    return tmp.file({
      postfix: '.html'
    }, (function(_this) {
      return function(err, path) {
        if (err) {
          return cb(err);
        }
        _this.dataPath = path;
        return tmp.file({
          postfix: '.js'
        }, function(err, path) {
          var scriptData;
          if (err) {
            return cb(err);
          }
          _this.scriptPath = path;
          scriptData = _this.generatePhantomFile();
          return fs.writeFile(_this.dataPath, _this.data, function(err) {
            if (err) {
              return cb(err);
            }
            return fs.writeFile(_this.scriptPath, scriptData, cb);
          });
        });
      };
    })(this));
  };

  Renderer.prototype.generatePhantomFile = function() {
    return "var webPage = require('webpage');\nvar page = webPage.create();\n\npage.viewportSize = {\n  width: " + (this.opts.width || 1024) + ",\n  height: " + (this.opts.height || 768) + "\n};\n\npage.open(" + (JSON.stringify(this.dataPath)) + ", function () {\n  page.render(" + (JSON.stringify(this.imagePath)) + ");\n  phantom.exit();\n});";
  };

  Renderer.prototype.runPhantom = function(cb) {
    var s;
    s = spawn('phantomjs', [this.scriptPath]);
    return s.on('close', function(code) {
      if (code !== 0) {
        return cb('phantom-err-' + code);
      }
      return cb();
    });
  };

  return Renderer;

})();
